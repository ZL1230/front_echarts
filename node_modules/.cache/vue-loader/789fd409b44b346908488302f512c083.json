{"remainingRequest":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Rank.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Rank.vue","mtime":1602319182000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwKICAgICAgYWxsRGF0YTogbnVsbCwKICAgICAgc3RhcnRWYWx1ZTogMCwgLy8g5Yy65Z+f57yp5pS+55qE6LW354K55YC8CiAgICAgIGVuZFZhbHVlOiA5LCAvLyDljLrln5/nvKnmlL7nmoTnu4jngrnlgLwKICAgICAgdGltZXJJZDogbnVsbCAvLyDlrprml7blmajnmoTmoIfor4YKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgLy8g5Zyo57uE5Lu25Yib5bu65a6M5oiQ5LmL5ZCOIOi/m+ihjOWbnuiwg+WHveaVsOeahOazqOWGjAogICAgdGhpcy4kc29ja2V0LnJlZ2lzdGVyQ2FsbEJhY2soJ3JhbmtEYXRhJywgdGhpcy5nZXREYXRhKQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLmluaXRDaGFydCgpCiAgICAvLyB0aGlzLmdldERhdGEoKQogICAgdGhpcy4kc29ja2V0LnNlbmQoewogICAgICBhY3Rpb246ICdnZXREYXRhJywKICAgICAgc29ja2V0VHlwZTogJ3JhbmtEYXRhJywKICAgICAgY2hhcnROYW1lOiAncmFuaycsCiAgICAgIHZhbHVlOiAnJwogICAgfSkKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICB0aGlzLnNjcmVlbkFkYXB0ZXIoKQogIH0sCiAgZGVzdHJveWVkICgpIHsKICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgIHRoaXMuJHNvY2tldC51blJlZ2lzdGVyQ2FsbEJhY2soJ3JhbmtEYXRhJykKICB9LAogIG1ldGhvZHM6IHsKICAgIGluaXRDaGFydCAoKSB7CiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZSA9IHRoaXMuJGVjaGFydHMuaW5pdCh0aGlzLiRyZWZzLnJhbmtfcmVmLCB0aGlzLnRoZW1lKQogICAgICBjb25zdCBpbml0T3B0aW9uID0gewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAn4paOIOWcsOWMuumUgOWUruaOkuihjCcsCiAgICAgICAgICBsZWZ0OiAyMCwKICAgICAgICAgIHRvcDogMjAKICAgICAgICB9LAogICAgICAgIGdyaWQ6IHsKICAgICAgICAgIHRvcDogJzQwJScsCiAgICAgICAgICBsZWZ0OiAnNSUnLAogICAgICAgICAgcmlnaHQ6ICc1JScsCiAgICAgICAgICBib3R0b206ICc1JScsCiAgICAgICAgICBjb250YWluTGFiZWw6IHRydWUKICAgICAgICB9LAogICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgIHNob3c6IHRydWUKICAgICAgICB9LAogICAgICAgIHhBeGlzOiB7CiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknCiAgICAgICAgfSwKICAgICAgICB5QXhpczogewogICAgICAgICAgdHlwZTogJ3ZhbHVlJwogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHR5cGU6ICdiYXInCiAgICAgICAgICB9CiAgICAgICAgXQogICAgICB9CiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oaW5pdE9wdGlvbikKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLm9uKCdtb3VzZW92ZXInLCAoKSA9PiB7CiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVySWQpCiAgICAgIH0pCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5vbignbW91c2VvdXQnLCAoKSA9PiB7CiAgICAgICAgdGhpcy5zdGFydEludGVydmFsKCkKICAgICAgfSkKICAgIH0sCiAgICBnZXREYXRhIChyZXQpIHsKICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo55qE5pWw5o2uLCDlr7l0aGlzLmFsbERhdGHov5vooYzotYvlgLzkuYvlkI4sIOiwg+eUqHVwZGF0ZUNoYXJ05pa55rOV5pu05paw5Zu+6KGoCiAgICAgIC8vIGNvbnN0IHsgZGF0YTogcmV0IH0gPSBhd2FpdCB0aGlzLiRodHRwLmdldCgncmFuaycpCiAgICAgIHRoaXMuYWxsRGF0YSA9IHJldAogICAgICAvLyDlr7lhbGxEYXRh6YeM6Z2i55qE5q+P5LiA5Liq5YWD57Sg6L+b6KGM5o6S5bqPLCDku47lpKfliLDlsI/ov5vooYwKICAgICAgdGhpcy5hbGxEYXRhLnNvcnQoKGEsIGIpID0+IHsKICAgICAgICByZXR1cm4gYi52YWx1ZSAtIGEudmFsdWUKICAgICAgfSkKICAgICAgY29uc29sZS5sb2codGhpcy5hbGxEYXRhKQogICAgICB0aGlzLnVwZGF0ZUNoYXJ0KCkKICAgICAgdGhpcy5zdGFydEludGVydmFsKCkKICAgIH0sCiAgICB1cGRhdGVDaGFydCAoKSB7CiAgICAgIGNvbnN0IGNvbG9yQXJyID0gWwogICAgICAgIFsnIzBCQTgyQycsICcjNEZGNzc4J10sCiAgICAgICAgWycjMkU3MkJGJywgJyMyM0U1RTUnXSwKICAgICAgICBbJyM1MDUyRUUnLCAnI0FCNkVFNSddCiAgICAgIF0KICAgICAgLy8g5aSE55CG5Zu+6KGo6ZyA6KaB55qE5pWw5o2uCiAgICAgIC8vIOaJgOacieecgeS7veaJgOW9ouaIkOeahOaVsOe7hAogICAgICBjb25zdCBwcm92aW5jZUFyciA9IHRoaXMuYWxsRGF0YS5tYXAoaXRlbSA9PiB7CiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZQogICAgICB9KQogICAgICAvLyDmiYDmnInnnIHku73lr7nlupTnmoTplIDllK7ph5Hpop0KICAgICAgY29uc3QgdmFsdWVBcnIgPSB0aGlzLmFsbERhdGEubWFwKGl0ZW0gPT4gewogICAgICAgIHJldHVybiBpdGVtLnZhbHVlCiAgICAgIH0pCiAgICAgIGNvbnN0IGRhdGFPcHRpb24gPSB7CiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIGRhdGE6IHByb3ZpbmNlQXJyCiAgICAgICAgfSwKICAgICAgICBkYXRhWm9vbTogewogICAgICAgICAgc2hvdzogZmFsc2UsCiAgICAgICAgICBzdGFydFZhbHVlOiB0aGlzLnN0YXJ0VmFsdWUsCiAgICAgICAgICBlbmRWYWx1ZTogdGhpcy5lbmRWYWx1ZQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGRhdGE6IHZhbHVlQXJyLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBjb2xvcjogYXJnID0+IHsKICAgICAgICAgICAgICAgIGxldCB0YXJnZXRDb2xvckFyciA9IG51bGwKICAgICAgICAgICAgICAgIGlmIChhcmcudmFsdWUgPiAzMDApIHsKICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sb3JBcnIgPSBjb2xvckFyclswXQogICAgICAgICAgICAgICAgfSBlbHNlIGlmIChhcmcudmFsdWUgPiAyMDApIHsKICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sb3JBcnIgPSBjb2xvckFyclsxXQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdGFyZ2V0Q29sb3JBcnIgPSBjb2xvckFyclsyXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLiRlY2hhcnRzLmdyYXBoaWMuTGluZWFyR3JhZGllbnQoMCwgMCwgMCwgMSwgWwogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAwLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0YXJnZXRDb2xvckFyclswXQogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLAogICAgICAgICAgICAgICAgICAgIGNvbG9yOiB0YXJnZXRDb2xvckFyclsxXQogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGRhdGFPcHRpb24pCiAgICB9LAogICAgc2NyZWVuQWRhcHRlciAoKSB7CiAgICAgIGNvbnN0IHRpdGxlRm9udFNpemUgPSB0aGlzLiRyZWZzLnJhbmtfcmVmLm9mZnNldFdpZHRoIC8gMTAwICogMy42CiAgICAgIGNvbnN0IGFkYXB0ZXJPcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGJhcldpZHRoOiB0aXRsZUZvbnRTaXplLAogICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICBiYXJCb3JkZXJSYWRpdXM6IFt0aXRsZUZvbnRTaXplIC8gMiwgdGl0bGVGb250U2l6ZSAvIDIsIDAsIDBdCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICBdCiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihhZGFwdGVyT3B0aW9uKQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UucmVzaXplKCkKICAgIH0sCiAgICBzdGFydEludGVydmFsICgpIHsKICAgICAgaWYgKHRoaXMudGltZXJJZCkgewogICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy50aW1lcklkKQogICAgICB9CiAgICAgIHRoaXMudGltZXJJZCA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICB0aGlzLnN0YXJ0VmFsdWUrKwogICAgICAgIHRoaXMuZW5kVmFsdWUrKwogICAgICAgIGlmICh0aGlzLmVuZFZhbHVlID4gdGhpcy5hbGxEYXRhLmxlbmd0aCAtIDEpIHsKICAgICAgICAgIHRoaXMuc3RhcnRWYWx1ZSA9IDAKICAgICAgICAgIHRoaXMuZW5kVmFsdWUgPSA5CiAgICAgICAgfQogICAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKQogICAgICB9LCAyMDAwKQogICAgfQogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIC4uLm1hcFN0YXRlKFsndGhlbWUnXSkKICB9LAogIHdhdGNoOiB7CiAgICB0aGVtZSAoKSB7CiAgICAgIGNvbnNvbGUubG9nKCfkuLvpopjliIfmjaLkuoYnKQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UuZGlzcG9zZSgpIC8vIOmUgOavgeW9k+WJjeeahOWbvuihqAogICAgICB0aGlzLmluaXRDaGFydCgpIC8vIOmHjeaWsOS7peacgOaWsOeahOS4u+mimOWQjeensOWIneWni+WMluWbvuihqOWvueixoQogICAgICB0aGlzLnNjcmVlbkFkYXB0ZXIoKSAvLyDlrozmiJDlsY/luZXnmoTpgILphY0KICAgICAgdGhpcy51cGRhdGVDaGFydCgpIC8vIOabtOaWsOWbvuihqOeahOWxleekugogICAgfQogIH0KfQo="},{"version":3,"sources":["Rank.vue"],"names":[],"mappingsfile":"Rank.vue","sourceRoot":"src/components","sourcesContent":["<!-- 地区销售排行 -->\n<template>\n  <div class='com-container'>\n    <div class='com-chart' ref='rank_ref'></div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      chartInstance: null,\n      allData: null,\n      startValue: 0, // 区域缩放的起点值\n      endValue: 9, // 区域缩放的终点值\n      timerId: null // 定时器的标识\n    }\n  },\n  created () {\n    // 在组件创建完成之后 进行回调函数的注册\n    this.$socket.registerCallBack('rankData', this.getData)\n  },\n  mounted () {\n    this.initChart()\n    // this.getData()\n    this.$socket.send({\n      action: 'getData',\n      socketType: 'rankData',\n      chartName: 'rank',\n      value: ''\n    })\n    window.addEventListener('resize', this.screenAdapter)\n    this.screenAdapter()\n  },\n  destroyed () {\n    window.removeEventListener('resize', this.screenAdapter)\n    clearInterval(this.timerId)\n    this.$socket.unRegisterCallBack('rankData')\n  },\n  methods: {\n    initChart () {\n      this.chartInstance = this.$echarts.init(this.$refs.rank_ref, this.theme)\n      const initOption = {\n        title: {\n          text: '▎ 地区销售排行',\n          left: 20,\n          top: 20\n        },\n        grid: {\n          top: '40%',\n          left: '5%',\n          right: '5%',\n          bottom: '5%',\n          containLabel: true\n        },\n        tooltip: {\n          show: true\n        },\n        xAxis: {\n          type: 'category'\n        },\n        yAxis: {\n          type: 'value'\n        },\n        series: [\n          {\n            type: 'bar'\n          }\n        ]\n      }\n      this.chartInstance.setOption(initOption)\n      this.chartInstance.on('mouseover', () => {\n        clearInterval(this.timerId)\n      })\n      this.chartInstance.on('mouseout', () => {\n        this.startInterval()\n      })\n    },\n    getData (ret) {\n      // 获取服务器的数据, 对this.allData进行赋值之后, 调用updateChart方法更新图表\n      // const { data: ret } = await this.$http.get('rank')\n      this.allData = ret\n      // 对allData里面的每一个元素进行排序, 从大到小进行\n      this.allData.sort((a, b) => {\n        return b.value - a.value\n      })\n      console.log(this.allData)\n      this.updateChart()\n      this.startInterval()\n    },\n    updateChart () {\n      const colorArr = [\n        ['#0BA82C', '#4FF778'],\n        ['#2E72BF', '#23E5E5'],\n        ['#5052EE', '#AB6EE5']\n      ]\n      // 处理图表需要的数据\n      // 所有省份所形成的数组\n      const provinceArr = this.allData.map(item => {\n        return item.name\n      })\n      // 所有省份对应的销售金额\n      const valueArr = this.allData.map(item => {\n        return item.value\n      })\n      const dataOption = {\n        xAxis: {\n          data: provinceArr\n        },\n        dataZoom: {\n          show: false,\n          startValue: this.startValue,\n          endValue: this.endValue\n        },\n        series: [\n          {\n            data: valueArr,\n            itemStyle: {\n              color: arg => {\n                let targetColorArr = null\n                if (arg.value > 300) {\n                  targetColorArr = colorArr[0]\n                } else if (arg.value > 200) {\n                  targetColorArr = colorArr[1]\n                } else {\n                  targetColorArr = colorArr[2]\n                }\n                return new this.$echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                  {\n                    offset: 0,\n                    color: targetColorArr[0]\n                  },\n                  {\n                    offset: 1,\n                    color: targetColorArr[1]\n                  }\n                ])\n              }\n            }\n          }\n        ]\n      }\n      this.chartInstance.setOption(dataOption)\n    },\n    screenAdapter () {\n      const titleFontSize = this.$refs.rank_ref.offsetWidth / 100 * 3.6\n      const adapterOption = {\n        title: {\n          textStyle: {\n            fontSize: titleFontSize\n          }\n        },\n        series: [\n          {\n            barWidth: titleFontSize,\n            itemStyle: {\n              barBorderRadius: [titleFontSize / 2, titleFontSize / 2, 0, 0]\n            }\n          }\n        ]\n      }\n      this.chartInstance.setOption(adapterOption)\n      this.chartInstance.resize()\n    },\n    startInterval () {\n      if (this.timerId) {\n        clearInterval(this.timerId)\n      }\n      this.timerId = setInterval(() => {\n        this.startValue++\n        this.endValue++\n        if (this.endValue > this.allData.length - 1) {\n          this.startValue = 0\n          this.endValue = 9\n        }\n        this.updateChart()\n      }, 2000)\n    }\n  },\n  computed: {\n    ...mapState(['theme'])\n  },\n  watch: {\n    theme () {\n      console.log('主题切换了')\n      this.chartInstance.dispose() // 销毁当前的图表\n      this.initChart() // 重新以最新的主题名称初始化图表对象\n      this.screenAdapter() // 完成屏幕的适配\n      this.updateChart() // 更新图表的展示\n    }\n  }\n}\n</script>\n\n<style lang='less' scoped>\n</style>\n"]}]}