{"remainingRequest":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Seller.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Seller.vue","mtime":1602319182000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwKICAgICAgYWxsRGF0YTogbnVsbCwgLy8g5pyN5Yqh5Zmo6L+U5Zue55qE5pWw5o2uCiAgICAgIGN1cnJlbnRQYWdlOiAxLCAvLyDlvZPliY3mmL7npLrnmoTpobXmlbAKICAgICAgdG90YWxQYWdlOiAwLCAvLyDkuIDlhbHmnInlpJrlsJHpobUKICAgICAgdGltZXJJZDogbnVsbCAvLyDlrprml7blmajnmoTmoIfor4YKICAgIH0KICB9LAogIGNyZWF0ZWQgKCkgewogICAgLy8g5Zyo57uE5Lu25Yib5bu65a6M5oiQ5LmL5ZCOIOi/m+ihjOWbnuiwg+WHveaVsOeahOazqOWGjAogICAgdGhpcy4kc29ja2V0LnJlZ2lzdGVyQ2FsbEJhY2soJ3NlbGxlckRhdGEnLCB0aGlzLmdldERhdGEpCiAgfSwKICBtb3VudGVkICgpIHsKICAgIHRoaXMuaW5pdENoYXJ0KCkKICAgIC8vIHRoaXMuZ2V0RGF0YSgpCiAgICB0aGlzLiRzb2NrZXQuc2VuZCh7CiAgICAgIGFjdGlvbjogJ2dldERhdGEnLAogICAgICBzb2NrZXRUeXBlOiAnc2VsbGVyRGF0YScsCiAgICAgIGNoYXJ0TmFtZTogJ3NlbGxlcicsCiAgICAgIHZhbHVlOiAnJwogICAgfSkKICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCB0aGlzLnNjcmVlbkFkYXB0ZXIpCiAgICAvLyDlnKjpobXpnaLliqDovb3lrozmiJDnmoTml7blgJksIOS4u+WKqOi/m+ihjOWxj+W5leeahOmAgumFjQogICAgdGhpcy5zY3JlZW5BZGFwdGVyKCkKICB9LAogIGRlc3Ryb3llZCAoKSB7CiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgIC8vIOWcqOe7hOS7tumUgOavgeeahOaXtuWAmSwg6ZyA6KaB5bCG55uR5ZCs5Zmo5Y+W5raI5o6JCiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKQogICAgdGhpcy4kc29ja2V0LnVuUmVnaXN0ZXJDYWxsQmFjaygnc2VsbGVyRGF0YScpCiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDliJ3lp4vljJZlY2hhcnRJbnN0YW5jZeWvueixoQogICAgaW5pdENoYXJ0ICgpIHsKICAgICAgdGhpcy5jaGFydEluc3RhbmNlID0gdGhpcy4kZWNoYXJ0cy5pbml0KHRoaXMuJHJlZnMuc2VsbGVyX3JlZiwgdGhpcy50aGVtZSkKICAgICAgLy8g5a+55Zu+6KGo5Yid5aeL5YyW6YWN572u55qE5o6n5Yi2CiAgICAgIGNvbnN0IGluaXRPcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHQ6ICfilo7llYblrrbplIDllK7nu5/orqEnLAogICAgICAgICAgbGVmdDogMjAsCiAgICAgICAgICB0b3A6IDIwCiAgICAgICAgfSwKICAgICAgICBncmlkOiB7CiAgICAgICAgICB0b3A6ICcyMCUnLAogICAgICAgICAgbGVmdDogJzMlJywKICAgICAgICAgIHJpZ2h0OiAnNiUnLAogICAgICAgICAgYm90dG9tOiAnMyUnLAogICAgICAgICAgY29udGFpbkxhYmVsOiB0cnVlIC8vIOi3neemu+aYr+WMheWQq+WdkOagh+i9tOS4iueahOaWh+WtlwogICAgICAgIH0sCiAgICAgICAgeEF4aXM6IHsKICAgICAgICAgIHR5cGU6ICd2YWx1ZScKICAgICAgICB9LAogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICB0eXBlOiAnY2F0ZWdvcnknCiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnYXhpcycsCiAgICAgICAgICBheGlzUG9pbnRlcjogewogICAgICAgICAgICB0eXBlOiAnbGluZScsCiAgICAgICAgICAgIHo6IDAsCiAgICAgICAgICAgIGxpbmVTdHlsZTogewogICAgICAgICAgICAgIGNvbG9yOiAnIzJEMzQ0MycKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIHR5cGU6ICdiYXInLAogICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsCiAgICAgICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogJ3doaXRlJwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgLy8g5oyH5piO6aKc6Imy5riQ5Y+Y55qE5pa55ZCRCiAgICAgICAgICAgICAgLy8g5oyH5piO5LiN5ZCM55m+5YiG5q+U5LmL5LiL6aKc6Imy55qE5YC8CiAgICAgICAgICAgICAgY29sb3I6IG5ldyB0aGlzLiRlY2hhcnRzLmdyYXBoaWMuTGluZWFyR3JhZGllbnQoMCwgMCwgMSwgMCwgWwogICAgICAgICAgICAgICAgLy8g55m+5YiG5LmLMOeKtuaAgeS5i+S4i+eahOminOiJsuWAvAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICBvZmZzZXQ6IDAsCiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzUwNTJFRScKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAvLyDnmb7liIbkuYsxMDDnirbmgIHkuYvkuIvnmoTpopzoibLlgLwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgb2Zmc2V0OiAxLAogICAgICAgICAgICAgICAgICBjb2xvcjogJyNBQjZFRTUnCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGluaXRPcHRpb24pCiAgICAgIC8vIOWvueWbvuihqOWvueixoei/m+ihjOm8oOagh+S6i+S7tueahOebkeWQrAogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uub24oJ21vdXNlb3ZlcicsICgpID0+IHsKICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgICAgfSkKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLm9uKCdtb3VzZW91dCcsICgpID0+IHsKICAgICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKQogICAgICB9KQogICAgfSwKICAgIC8vIOiOt+WPluacjeWKoeWZqOeahOaVsOaNrgogICAgZ2V0RGF0YSAocmV0KSB7CiAgICAgIC8vIGh0dHA6Ly8xMjcuMC4wLjE6ODg4OC9hcGkvc2VsbGVyCiAgICAgIC8vIGNvbnN0IHsgZGF0YTogcmV0IH0gPSBhd2FpdCB0aGlzLiRodHRwLmdldCgnc2VsbGVyJykKICAgICAgdGhpcy5hbGxEYXRhID0gcmV0CiAgICAgIC8vIOWvueaVsOaNruaOkuW6jwogICAgICB0aGlzLmFsbERhdGEuc29ydCgoYSwgYikgPT4gewogICAgICAgIHJldHVybiBhLnZhbHVlIC0gYi52YWx1ZSAvLyDku47lsI/liLDlpKfnmoTmjpLluo8KICAgICAgfSkKICAgICAgLy8g5q+PNeS4quWFg+e0oOaYvuekuuS4gOmhtQogICAgICB0aGlzLnRvdGFsUGFnZSA9IHRoaXMuYWxsRGF0YS5sZW5ndGggJSA1ID09PSAwID8gdGhpcy5hbGxEYXRhLmxlbmd0aCAvIDUgOiB0aGlzLmFsbERhdGEubGVuZ3RoIC8gNSArIDEKICAgICAgdGhpcy51cGRhdGVDaGFydCgpCiAgICAgIC8vIOWQr+WKqOWumuaXtuWZqAogICAgICB0aGlzLnN0YXJ0SW50ZXJ2YWwoKQogICAgfSwKICAgIC8vIOabtOaWsOWbvuihqAogICAgdXBkYXRlQ2hhcnQgKCkgewogICAgICBjb25zdCBzdGFydCA9ICh0aGlzLmN1cnJlbnRQYWdlIC0gMSkgKiA1CiAgICAgIGNvbnN0IGVuZCA9IHRoaXMuY3VycmVudFBhZ2UgKiA1CiAgICAgIGNvbnN0IHNob3dEYXRhID0gdGhpcy5hbGxEYXRhLnNsaWNlKHN0YXJ0LCBlbmQpCiAgICAgIGNvbnN0IHNlbGxlck5hbWVzID0gc2hvd0RhdGEubWFwKChpdGVtKSA9PiB7CiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZQogICAgICB9KQogICAgICBjb25zdCBzZWxsZXJWYWx1ZXMgPSBzaG93RGF0YS5tYXAoKGl0ZW0pID0+IHsKICAgICAgICByZXR1cm4gaXRlbS52YWx1ZQogICAgICB9KQogICAgICBjb25zdCBkYXRhT3B0aW9uID0gewogICAgICAgIHlBeGlzOiB7CiAgICAgICAgICBkYXRhOiBzZWxsZXJOYW1lcwogICAgICAgIH0sCiAgICAgICAgc2VyaWVzOiBbCiAgICAgICAgICB7CiAgICAgICAgICAgIGRhdGE6IHNlbGxlclZhbHVlcwogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGRhdGFPcHRpb24pCiAgICB9LAogICAgc3RhcnRJbnRlcnZhbCAoKSB7CiAgICAgIGlmICh0aGlzLnRpbWVySWQpIHsKICAgICAgICBjbGVhckludGVydmFsKHRoaXMudGltZXJJZCkKICAgICAgfQogICAgICB0aGlzLnRpbWVySWQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrCiAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPiB0aGlzLnRvdGFsUGFnZSkgewogICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDEKICAgICAgICB9CiAgICAgICAgdGhpcy51cGRhdGVDaGFydCgpCiAgICAgIH0sIDMwMDApCiAgICB9LAogICAgLy8g5b2T5rWP6KeI5Zmo55qE5aSn5bCP5Y+R55Sf5Y+Y5YyW55qE5pe25YCZLCDkvJrosIPnlKjnmoTmlrnms5UsIOadpeWujOaIkOWxj+W5leeahOmAgumFjQogICAgc2NyZWVuQWRhcHRlciAoKSB7CiAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuJHJlZnMuc2VsbGVyX3JlZi5vZmZzZXRXaWR0aCkKICAgICAgY29uc3QgdGl0bGVGb250U2l6ZSA9IHRoaXMuJHJlZnMuc2VsbGVyX3JlZi5vZmZzZXRXaWR0aCAvIDEwMCAqIDMuNgogICAgICAvLyDlkozliIbovqjnjoflpKflsI/nm7jlhbPnmoTphY3nva7pobkKICAgICAgY29uc3QgYWRhcHRlck9wdGlvbiA9IHsKICAgICAgICB0aXRsZTogewogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGZvbnRTaXplOiB0aXRsZUZvbnRTaXplCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICBheGlzUG9pbnRlcjogewogICAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgICB3aWR0aDogdGl0bGVGb250U2l6ZQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFsKICAgICAgICAgIHsKICAgICAgICAgICAgYmFyV2lkdGg6IHRpdGxlRm9udFNpemUsCiAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgIGJhckJvcmRlclJhZGl1czogWzAsIHRpdGxlRm9udFNpemUgLyAyLCB0aXRsZUZvbnRTaXplIC8gMiwgMF0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIF0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGFkYXB0ZXJPcHRpb24pCiAgICAgIC8vIOaJi+WKqOeahOiwg+eUqOWbvuihqOWvueixoeeahHJlc2l6ZSDmiY3og73kuqfnlJ/mlYjmnpwKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnJlc2l6ZSgpCiAgICB9CiAgfSwKICBjb21wdXRlZDogewogICAgLi4ubWFwU3RhdGUoWyd0aGVtZSddKQogIH0sCiAgd2F0Y2g6IHsKICAgIHRoZW1lICgpIHsKICAgICAgY29uc29sZS5sb2coJ+S4u+mimOWIh+aNouS6hicpCiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5kaXNwb3NlKCkgLy8g6ZSA5q+B5b2T5YmN55qE5Zu+6KGoCiAgICAgIHRoaXMuaW5pdENoYXJ0KCkgLy8g6YeN5paw5Lul5pyA5paw55qE5Li76aKY5ZCN56ew5Yid5aeL5YyW5Zu+6KGo5a+56LGhCiAgICAgIHRoaXMuc2NyZWVuQWRhcHRlcigpIC8vIOWujOaIkOWxj+W5leeahOmAgumFjQogICAgICB0aGlzLnVwZGF0ZUNoYXJ0KCkgLy8g5pu05paw5Zu+6KGo55qE5bGV56S6CiAgICB9CiAgfQp9Cg=="},{"version":3,"sources":["Seller.vue"],"names":[],"mappingsfile":"Seller.vue","sourceRoot":"src/components","sourcesContent":["<!-- 商家销量统计的横向柱状图 -->\n<template>\n  <div class=\"com-container\">\n    <div class=\"com-chart\" ref=\"seller_ref\"></div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nexport default {\n  data () {\n    return {\n      chartInstance: null,\n      allData: null, // 服务器返回的数据\n      currentPage: 1, // 当前显示的页数\n      totalPage: 0, // 一共有多少页\n      timerId: null // 定时器的标识\n    }\n  },\n  created () {\n    // 在组件创建完成之后 进行回调函数的注册\n    this.$socket.registerCallBack('sellerData', this.getData)\n  },\n  mounted () {\n    this.initChart()\n    // this.getData()\n    this.$socket.send({\n      action: 'getData',\n      socketType: 'sellerData',\n      chartName: 'seller',\n      value: ''\n    })\n    window.addEventListener('resize', this.screenAdapter)\n    // 在页面加载完成的时候, 主动进行屏幕的适配\n    this.screenAdapter()\n  },\n  destroyed () {\n    clearInterval(this.timerId)\n    // 在组件销毁的时候, 需要将监听器取消掉\n    window.removeEventListener('resize', this.screenAdapter)\n    this.$socket.unRegisterCallBack('sellerData')\n  },\n  methods: {\n    // 初始化echartInstance对象\n    initChart () {\n      this.chartInstance = this.$echarts.init(this.$refs.seller_ref, this.theme)\n      // 对图表初始化配置的控制\n      const initOption = {\n        title: {\n          text: '▎商家销售统计',\n          left: 20,\n          top: 20\n        },\n        grid: {\n          top: '20%',\n          left: '3%',\n          right: '6%',\n          bottom: '3%',\n          containLabel: true // 距离是包含坐标轴上的文字\n        },\n        xAxis: {\n          type: 'value'\n        },\n        yAxis: {\n          type: 'category'\n        },\n        tooltip: {\n          trigger: 'axis',\n          axisPointer: {\n            type: 'line',\n            z: 0,\n            lineStyle: {\n              color: '#2D3443'\n            }\n          }\n        },\n        series: [\n          {\n            type: 'bar',\n            label: {\n              show: true,\n              position: 'right',\n              textStyle: {\n                color: 'white'\n              }\n            },\n            itemStyle: {\n              // 指明颜色渐变的方向\n              // 指明不同百分比之下颜色的值\n              color: new this.$echarts.graphic.LinearGradient(0, 0, 1, 0, [\n                // 百分之0状态之下的颜色值\n                {\n                  offset: 0,\n                  color: '#5052EE'\n                },\n                // 百分之100状态之下的颜色值\n                {\n                  offset: 1,\n                  color: '#AB6EE5'\n                }\n              ])\n            }\n          }\n        ]\n      }\n      this.chartInstance.setOption(initOption)\n      // 对图表对象进行鼠标事件的监听\n      this.chartInstance.on('mouseover', () => {\n        clearInterval(this.timerId)\n      })\n      this.chartInstance.on('mouseout', () => {\n        this.startInterval()\n      })\n    },\n    // 获取服务器的数据\n    getData (ret) {\n      // http://127.0.0.1:8888/api/seller\n      // const { data: ret } = await this.$http.get('seller')\n      this.allData = ret\n      // 对数据排序\n      this.allData.sort((a, b) => {\n        return a.value - b.value // 从小到大的排序\n      })\n      // 每5个元素显示一页\n      this.totalPage = this.allData.length % 5 === 0 ? this.allData.length / 5 : this.allData.length / 5 + 1\n      this.updateChart()\n      // 启动定时器\n      this.startInterval()\n    },\n    // 更新图表\n    updateChart () {\n      const start = (this.currentPage - 1) * 5\n      const end = this.currentPage * 5\n      const showData = this.allData.slice(start, end)\n      const sellerNames = showData.map((item) => {\n        return item.name\n      })\n      const sellerValues = showData.map((item) => {\n        return item.value\n      })\n      const dataOption = {\n        yAxis: {\n          data: sellerNames\n        },\n        series: [\n          {\n            data: sellerValues\n          }\n        ]\n      }\n      this.chartInstance.setOption(dataOption)\n    },\n    startInterval () {\n      if (this.timerId) {\n        clearInterval(this.timerId)\n      }\n      this.timerId = setInterval(() => {\n        this.currentPage++\n        if (this.currentPage > this.totalPage) {\n          this.currentPage = 1\n        }\n        this.updateChart()\n      }, 3000)\n    },\n    // 当浏览器的大小发生变化的时候, 会调用的方法, 来完成屏幕的适配\n    screenAdapter () {\n      // console.log(this.$refs.seller_ref.offsetWidth)\n      const titleFontSize = this.$refs.seller_ref.offsetWidth / 100 * 3.6\n      // 和分辨率大小相关的配置项\n      const adapterOption = {\n        title: {\n          textStyle: {\n            fontSize: titleFontSize\n          }\n        },\n        tooltip: {\n          axisPointer: {\n            lineStyle: {\n              width: titleFontSize\n            }\n          }\n        },\n        series: [\n          {\n            barWidth: titleFontSize,\n            itemStyle: {\n              barBorderRadius: [0, titleFontSize / 2, titleFontSize / 2, 0]\n            }\n          }\n        ]\n      }\n      this.chartInstance.setOption(adapterOption)\n      // 手动的调用图表对象的resize 才能产生效果\n      this.chartInstance.resize()\n    }\n  },\n  computed: {\n    ...mapState(['theme'])\n  },\n  watch: {\n    theme () {\n      console.log('主题切换了')\n      this.chartInstance.dispose() // 销毁当前的图表\n      this.initChart() // 重新以最新的主题名称初始化图表对象\n      this.screenAdapter() // 完成屏幕的适配\n      this.updateChart() // 更新图表的展示\n    }\n  }\n}\n</script>\n\n<style lang=\"less\" scoped>\n</style>\n"]}]}