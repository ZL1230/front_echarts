{"remainingRequest":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Map.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\src\\components\\Map.vue","mtime":1602319182000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\itryl\\Desktop\\projects\\vision-project\\vision原版\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB7IG1hcFN0YXRlIH0gZnJvbSAndnVleCcKaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJwppbXBvcnQgeyBnZXRQcm92aW5jZU1hcEluZm8gfSBmcm9tICdAL3V0aWxzL21hcF91dGlscycKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEgKCkgewogICAgcmV0dXJuIHsKICAgICAgY2hhcnRJbnN0YW5jZTogbnVsbCwKICAgICAgYWxsRGF0YTogbnVsbCwKICAgICAgbWFwRGF0YToge30gLy8g5omA6I635Y+W55qE55yB5Lu955qE5Zyw5Zu+55+i6YeP5pWw5o2uCiAgICB9CiAgfSwKICBjcmVhdGVkICgpIHsKICAgIC8vIOWcqOe7hOS7tuWIm+W7uuWujOaIkOS5i+WQjiDov5vooYzlm57osIPlh73mlbDnmoTms6jlhowKICAgIHRoaXMuJHNvY2tldC5yZWdpc3RlckNhbGxCYWNrKCdtYXBEYXRhJywgdGhpcy5nZXREYXRhKQogIH0sCiAgbW91bnRlZCAoKSB7CiAgICB0aGlzLmluaXRDaGFydCgpCiAgICAvLyB0aGlzLmdldERhdGEoKQogICAgdGhpcy4kc29ja2V0LnNlbmQoewogICAgICBhY3Rpb246ICdnZXREYXRhJywKICAgICAgc29ja2V0VHlwZTogJ21hcERhdGEnLAogICAgICBjaGFydE5hbWU6ICdtYXAnLAogICAgICB2YWx1ZTogJycKICAgIH0pCiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKQogICAgdGhpcy5zY3JlZW5BZGFwdGVyKCkKICB9LAogIGRlc3Ryb3llZCAoKSB7CiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgdGhpcy5zY3JlZW5BZGFwdGVyKQogICAgdGhpcy4kc29ja2V0LnVuUmVnaXN0ZXJDYWxsQmFjaygnbWFwRGF0YScpCiAgfSwKICBtZXRob2RzOiB7CiAgICBhc3luYyBpbml0Q2hhcnQgKCkgewogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UgPSB0aGlzLiRlY2hhcnRzLmluaXQodGhpcy4kcmVmcy5tYXBfcmVmLCB0aGlzLnRoZW1lKQogICAgICAvLyDojrflj5bkuK3lm73lnLDlm77nmoTnn6Lph4/mlbDmja4KICAgICAgLy8gaHR0cDovL2xvY2FsaG9zdDo4OTk5L3N0YXRpYy9tYXAvY2hpbmEuanNvbgogICAgICAvLyDnlLHkuo7miJHku6znjrDlnKjojrflj5bnmoTlnLDlm77nn6Lph4/mlbDmja7lubbkuI3mmK/kvY3kuo5LT0Ey55qE5ZCO5Y+wLCDmiYDku6XlkrHku6zkuI3og73kvb/nlKh0aGlzLiRodHRwCiAgICAgIGNvbnN0IHJldCA9IGF3YWl0IGF4aW9zLmdldCgnaHR0cDovL2xvY2FsaG9zdDo4OTk5L3N0YXRpYy9tYXAvY2hpbmEuanNvbicpCiAgICAgIHRoaXMuJGVjaGFydHMucmVnaXN0ZXJNYXAoJ2NoaW5hJywgcmV0LmRhdGEpCiAgICAgIGNvbnN0IGluaXRPcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHQ6ICfilo4g5ZWG5a625YiG5biDJywKICAgICAgICAgIGxlZnQ6IDIwLAogICAgICAgICAgdG9wOiAyMAogICAgICAgIH0sCiAgICAgICAgZ2VvOiB7CiAgICAgICAgICB0eXBlOiAnbWFwJywKICAgICAgICAgIG1hcDogJ2NoaW5hJywKICAgICAgICAgIHRvcDogJzUlJywKICAgICAgICAgIGJvdHRvbTogJzUlJywKICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICBhcmVhQ29sb3I6ICcjMkU3MkJGJywKICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjMzMzJwogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBsZWZ0OiAnNSUnLAogICAgICAgICAgYm90dG9tOiAnNSUnLAogICAgICAgICAgb3JpZW50OiAndmVydGljYWwnCiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuY2hhcnRJbnN0YW5jZS5zZXRPcHRpb24oaW5pdE9wdGlvbikKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLm9uKCdjbGljaycsIGFzeW5jIGFyZyA9PiB7CiAgICAgICAgLy8gYXJnLm5hbWUg5b6X5Yiw5omA54K55Ye755qE55yB5Lu9LCDov5nkuKrnnIHku73ku5bmmK/kuK3mlocKICAgICAgICBjb25zdCBwcm92aW5jZUluZm8gPSBnZXRQcm92aW5jZU1hcEluZm8oYXJnLm5hbWUpCiAgICAgICAgY29uc29sZS5sb2cocHJvdmluY2VJbmZvKQogICAgICAgIC8vIOmcgOimgeiOt+WPlui/meS4quecgeS7veeahOWcsOWbvuefoumHj+aVsOaNrgogICAgICAgIC8vIOWIpOaWreW9k+WJjeaJgOeCueWHu+eahOi/meS4quecgeS7veeahOWcsOWbvuefoumHj+aVsOaNruWcqG1hcERhdGHkuK3mmK/lkKblrZjlnKgKICAgICAgICBpZiAoIXRoaXMubWFwRGF0YVtwcm92aW5jZUluZm8ua2V5XSkgewogICAgICAgICAgY29uc3QgcmV0ID0gYXdhaXQgYXhpb3MuZ2V0KCdodHRwOi8vbG9jYWxob3N0Ojg5OTknICsgcHJvdmluY2VJbmZvLnBhdGgpCiAgICAgICAgICB0aGlzLm1hcERhdGFbcHJvdmluY2VJbmZvLmtleV0gPSByZXQuZGF0YQogICAgICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcChwcm92aW5jZUluZm8ua2V5LCByZXQuZGF0YSkKICAgICAgICB9CiAgICAgICAgY29uc3QgY2hhbmdlT3B0aW9uID0gewogICAgICAgICAgZ2VvOiB7CiAgICAgICAgICAgIG1hcDogcHJvdmluY2VJbmZvLmtleQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKGNoYW5nZU9wdGlvbikKICAgICAgfSkKICAgIH0sCiAgICBnZXREYXRhIChyZXQpIHsKICAgICAgLy8g6I635Y+W5pyN5Yqh5Zmo55qE5pWw5o2uLCDlr7l0aGlzLmFsbERhdGHov5vooYzotYvlgLzkuYvlkI4sIOiwg+eUqHVwZGF0ZUNoYXJ05pa55rOV5pu05paw5Zu+6KGoCiAgICAgIC8vIGNvbnN0IHsgZGF0YTogcmV0IH0gPSBhd2FpdCB0aGlzLiRodHRwLmdldCgnbWFwJykKICAgICAgdGhpcy5hbGxEYXRhID0gcmV0CiAgICAgIGNvbnNvbGUubG9nKHRoaXMuYWxsRGF0YSkKICAgICAgdGhpcy51cGRhdGVDaGFydCgpCiAgICB9LAogICAgdXBkYXRlQ2hhcnQgKCkgewogICAgICAvLyDlpITnkIblm77ooajpnIDopoHnmoTmlbDmja4KICAgICAgLy8g5Zu+5L6L55qE5pWw5o2uCiAgICAgIGNvbnN0IGxlZ2VuZEFyciA9IHRoaXMuYWxsRGF0YS5tYXAoaXRlbSA9PiB7CiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZQogICAgICB9KQogICAgICBjb25zdCBzZXJpZXNBcnIgPSB0aGlzLmFsbERhdGEubWFwKGl0ZW0gPT4gewogICAgICAgIC8vIHJldHVybueahOi/meS4quWvueixoeWwseS7o+ihqOeahOaYr+S4gOS4quexu+WIq+S4i+eahOaJgOacieaVo+eCueaVsOaNrgogICAgICAgIC8vIOWmguaenOaDs+WcqOWcsOWbvuS4reaYvuekuuaVo+eCueeahOaVsOaNriwg5oiR5Lus6ZyA6KaB57uZ5pWj54K555qE5Zu+6KGo5aKe5Yqg5LiA5Liq6YWN572uLCBjb29yZGluYXRlU3lzdGVtOmdlbwogICAgICAgIHJldHVybiB7CiAgICAgICAgICB0eXBlOiAnZWZmZWN0U2NhdHRlcicsCiAgICAgICAgICByaXBwbGVFZmZlY3Q6IHsKICAgICAgICAgICAgc2NhbGU6IDUsCiAgICAgICAgICAgIGJydXNoVHlwZTogJ3N0cm9rZScKICAgICAgICAgIH0sCiAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsCiAgICAgICAgICBkYXRhOiBpdGVtLmNoaWxkcmVuLAogICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbTogJ2dlbycKICAgICAgICB9CiAgICAgIH0pCiAgICAgIGNvbnN0IGRhdGFPcHRpb24gPSB7CiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBkYXRhOiBsZWdlbmRBcnIKICAgICAgICB9LAogICAgICAgIHNlcmllczogc2VyaWVzQXJyCiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihkYXRhT3B0aW9uKQogICAgfSwKICAgIHNjcmVlbkFkYXB0ZXIgKCkgewogICAgICBjb25zdCB0aXRsZUZvbnRTaXplID0gdGhpcy4kcmVmcy5tYXBfcmVmLm9mZnNldFdpZHRoIC8gMTAwICogMy42CiAgICAgIGNvbnN0IGFkYXB0ZXJPcHRpb24gPSB7CiAgICAgICAgdGl0bGU6IHsKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZQogICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgbGVnZW5kOiB7CiAgICAgICAgICBpdGVtV2lkdGg6IHRpdGxlRm9udFNpemUgLyAyLAogICAgICAgICAgaXRlbUhlaWdodDogdGl0bGVGb250U2l6ZSAvIDIsCiAgICAgICAgICBpdGVtR2FwOiB0aXRsZUZvbnRTaXplIC8gMiwKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBmb250U2l6ZTogdGl0bGVGb250U2l6ZSAvIDIKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgdGhpcy5jaGFydEluc3RhbmNlLnNldE9wdGlvbihhZGFwdGVyT3B0aW9uKQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2UucmVzaXplKCkKICAgIH0sCiAgICAvLyDlm57liLDkuK3lm73lnLDlm74KICAgIHJldmVydE1hcCAoKSB7CiAgICAgIGNvbnN0IHJldmVydE9wdGlvbiA9IHsKICAgICAgICBnZW86IHsKICAgICAgICAgIG1hcDogJ2NoaW5hJwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLmNoYXJ0SW5zdGFuY2Uuc2V0T3B0aW9uKHJldmVydE9wdGlvbikKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICAuLi5tYXBTdGF0ZShbJ3RoZW1lJ10pCiAgfSwKICB3YXRjaDogewogICAgdGhlbWUgKCkgewogICAgICBjb25zb2xlLmxvZygn5Li76aKY5YiH5o2i5LqGJykKICAgICAgdGhpcy5jaGFydEluc3RhbmNlLmRpc3Bvc2UoKSAvLyDplIDmr4HlvZPliY3nmoTlm77ooagKICAgICAgdGhpcy5pbml0Q2hhcnQoKSAvLyDph43mlrDku6XmnIDmlrDnmoTkuLvpopjlkI3np7DliJ3lp4vljJblm77ooajlr7nosaEKICAgICAgdGhpcy5zY3JlZW5BZGFwdGVyKCkgLy8g5a6M5oiQ5bGP5bmV55qE6YCC6YWNCiAgICAgIHRoaXMudXBkYXRlQ2hhcnQoKSAvLyDmm7TmlrDlm77ooajnmoTlsZXnpLoKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Map.vue"],"names":[],"mappingsfile":"Map.vue","sourceRoot":"src/components","sourcesContent":["<!-- 商家分布图表 -->\n<template>\n  <div class='com-container' @dblclick=\"revertMap\">\n    <div class='com-chart' ref='map_ref'></div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport axios from 'axios'\nimport { getProvinceMapInfo } from '@/utils/map_utils'\nexport default {\n  data () {\n    return {\n      chartInstance: null,\n      allData: null,\n      mapData: {} // 所获取的省份的地图矢量数据\n    }\n  },\n  created () {\n    // 在组件创建完成之后 进行回调函数的注册\n    this.$socket.registerCallBack('mapData', this.getData)\n  },\n  mounted () {\n    this.initChart()\n    // this.getData()\n    this.$socket.send({\n      action: 'getData',\n      socketType: 'mapData',\n      chartName: 'map',\n      value: ''\n    })\n    window.addEventListener('resize', this.screenAdapter)\n    this.screenAdapter()\n  },\n  destroyed () {\n    window.removeEventListener('resize', this.screenAdapter)\n    this.$socket.unRegisterCallBack('mapData')\n  },\n  methods: {\n    async initChart () {\n      this.chartInstance = this.$echarts.init(this.$refs.map_ref, this.theme)\n      // 获取中国地图的矢量数据\n      // http://localhost:8999/static/map/china.json\n      // 由于我们现在获取的地图矢量数据并不是位于KOA2的后台, 所以咱们不能使用this.$http\n      const ret = await axios.get('http://localhost:8999/static/map/china.json')\n      this.$echarts.registerMap('china', ret.data)\n      const initOption = {\n        title: {\n          text: '▎ 商家分布',\n          left: 20,\n          top: 20\n        },\n        geo: {\n          type: 'map',\n          map: 'china',\n          top: '5%',\n          bottom: '5%',\n          itemStyle: {\n            areaColor: '#2E72BF',\n            borderColor: '#333'\n          }\n        },\n        legend: {\n          left: '5%',\n          bottom: '5%',\n          orient: 'vertical'\n        }\n      }\n      this.chartInstance.setOption(initOption)\n      this.chartInstance.on('click', async arg => {\n        // arg.name 得到所点击的省份, 这个省份他是中文\n        const provinceInfo = getProvinceMapInfo(arg.name)\n        console.log(provinceInfo)\n        // 需要获取这个省份的地图矢量数据\n        // 判断当前所点击的这个省份的地图矢量数据在mapData中是否存在\n        if (!this.mapData[provinceInfo.key]) {\n          const ret = await axios.get('http://localhost:8999' + provinceInfo.path)\n          this.mapData[provinceInfo.key] = ret.data\n          this.$echarts.registerMap(provinceInfo.key, ret.data)\n        }\n        const changeOption = {\n          geo: {\n            map: provinceInfo.key\n          }\n        }\n        this.chartInstance.setOption(changeOption)\n      })\n    },\n    getData (ret) {\n      // 获取服务器的数据, 对this.allData进行赋值之后, 调用updateChart方法更新图表\n      // const { data: ret } = await this.$http.get('map')\n      this.allData = ret\n      console.log(this.allData)\n      this.updateChart()\n    },\n    updateChart () {\n      // 处理图表需要的数据\n      // 图例的数据\n      const legendArr = this.allData.map(item => {\n        return item.name\n      })\n      const seriesArr = this.allData.map(item => {\n        // return的这个对象就代表的是一个类别下的所有散点数据\n        // 如果想在地图中显示散点的数据, 我们需要给散点的图表增加一个配置, coordinateSystem:geo\n        return {\n          type: 'effectScatter',\n          rippleEffect: {\n            scale: 5,\n            brushType: 'stroke'\n          },\n          name: item.name,\n          data: item.children,\n          coordinateSystem: 'geo'\n        }\n      })\n      const dataOption = {\n        legend: {\n          data: legendArr\n        },\n        series: seriesArr\n      }\n      this.chartInstance.setOption(dataOption)\n    },\n    screenAdapter () {\n      const titleFontSize = this.$refs.map_ref.offsetWidth / 100 * 3.6\n      const adapterOption = {\n        title: {\n          textStyle: {\n            fontSize: titleFontSize\n          }\n        },\n        legend: {\n          itemWidth: titleFontSize / 2,\n          itemHeight: titleFontSize / 2,\n          itemGap: titleFontSize / 2,\n          textStyle: {\n            fontSize: titleFontSize / 2\n          }\n        }\n      }\n      this.chartInstance.setOption(adapterOption)\n      this.chartInstance.resize()\n    },\n    // 回到中国地图\n    revertMap () {\n      const revertOption = {\n        geo: {\n          map: 'china'\n        }\n      }\n      this.chartInstance.setOption(revertOption)\n    }\n  },\n  computed: {\n    ...mapState(['theme'])\n  },\n  watch: {\n    theme () {\n      console.log('主题切换了')\n      this.chartInstance.dispose() // 销毁当前的图表\n      this.initChart() // 重新以最新的主题名称初始化图表对象\n      this.screenAdapter() // 完成屏幕的适配\n      this.updateChart() // 更新图表的展示\n    }\n  }\n}\n</script>\n\n<style lang='less' scoped>\n</style>\n"]}]}